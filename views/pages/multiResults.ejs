<div class="container-fluid py-4">
  <!-- Header Section -->
  <div class="row mb-4">
    <div class="col-12">
      <div class="d-flex justify-content-between align-items-center">
        <div>
          <h1 class="h3 mb-1">
            <i class="fas fa-layer-group text-primary"></i>
            Multi-JD Screening Results
          </h1>
          <p class="text-muted mb-0">Comprehensive candidate matching across multiple job categories</p>
        </div>
        <div class="text-end">
          <a href="/screening" class="btn btn-outline-primary">
            <i class="fas fa-plus"></i> New Screening
          </a>
        </div>
      </div>
    </div>
  </div>

  <!-- Enhanced Statistics Summary -->
  <div class="row mb-4">
    <div class="col-12">
      <div class="card border-0 shadow-sm bg-gradient" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
        <div class="card-body text-white text-center py-4">
          <div class="row">
            <div class="col-md-3">
              <i class="fas fa-users fa-2x mb-2"></i>
              <h2 class="display-6 mb-1">
                <%= (statistics && statistics.totalCandidates) ? statistics.totalCandidates : 0 %>
              </h2>
              <p class="mb-0">Total Candidates Found</p>
            </div>
            <div class="col-md-3">
              <i class="fas fa-trophy fa-2x mb-2"></i>
              <% if (statistics && (statistics.averageBestScore || statistics.averageScore)) { %>
                <h2 class="display-6 mb-1">
                  <%= Math.round(statistics.averageBestScore || statistics.averageScore || 0) %>%
                </h2>
                <p class="mb-0">Average Best Match Score</p>
              <% } else { %>
                <h2 class="display-6 mb-1">0%</h2>
                <p class="mb-0">Average Match Score</p>
              <% } %>
            </div>
            <div class="col-md-3">
              <i class="fas fa-briefcase fa-2x mb-2"></i>
              <h2 class="display-6 mb-1">
                <%= (jobCategories && jobCategories.length) ? jobCategories.length : 
                    (statistics && statistics.categoryBreakdown ? statistics.categoryBreakdown.length : 4) %>
              </h2>
              <p class="mb-0">Job Categories Screened</p>
            </div>
            <div class="col-md-3">
              <i class="fas fa-check-circle fa-2x mb-2"></i>
              <h2 class="display-6 mb-1">
                <%= (statistics && statistics.qualifiedCandidates) ? statistics.qualifiedCandidates : 0 %>
              </h2>
              <p class="mb-0">Qualified Candidates</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Global Filter Controls (Same as Single JD) -->
  <% if (results && results.length > 0) { %>
    <div class="row mb-4">
      <div class="col-12">
        <div class="card border-0 shadow-sm">
          <div class="card-body">
            <h5 class="card-title mb-3">
              <i class="fas fa-filter text-primary"></i>
              Filter & Sort Candidates
            </h5>
            <div class="row align-items-center">
              <div class="col-md-4">
                <label for="minMatchScore" class="form-label">Filter by minimum match score:</label>
                <input type="range" class="form-range" id="minMatchScore" min="0" max="100" value="0">
                <small class="text-muted">Score: <span id="scoreDisplay">0</span>%</small>
              </div>
              <div class="col-md-4">
                <label for="sortResults" class="form-label">Sort by:</label>
                <select class="form-select" id="sortResults">
                  <option value="score-desc">Match Score (High to Low)</option>
                  <option value="score-asc">Match Score (Low to High)</option>
                  <option value="name-asc">Name (A-Z)</option>
                  <option value="name-desc">Name (Z-A)</option>
                  <option value="category">Group by Best Job Category</option>
                </select>
              </div>
              <div class="col-md-4">
                <label for="categoryFilter" class="form-label">Filter by Job Category:</label>
                <select class="form-select" id="categoryFilter">
                  <option value="">All Categories</option>
                  <option value="network_engineer">Network Engineer</option>
                  <option value="full_stack_developer">Full Stack Developer</option>
                  <option value="software_developer">Software Developer</option>
                  <option value="finance_intern">Finance Intern</option>
                  <option value="general">General</option>
                </select>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Candidates Display (Card Format like Single JD) -->
    <div class="row">
      <div class="col-12">
        <!-- Results Summary -->
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h4 class="mb-0">
            <i class="fas fa-users text-primary"></i>
            All Candidates
          </h4>
          <div class="text-muted">
            Showing <strong><span id="visibleCount"><%= results.length %></span></strong> of <strong><%= results.length %></strong> candidates
          </div>
        </div>

        <!-- Candidates Grid (Same styling as Single JD) -->
        <div class="row" id="candidatesContainer">
          <% results.forEach((candidate, index) => { %>
            <% 
              // Extract candidate data - handle both structures
              const candidateName = candidate.candidateName || candidate.resumeId?.candidateName || 'Unknown Candidate';
              const email = candidate.email || candidate.resumeId?.email || '';
              const phone = candidate.phone || candidate.resumeId?.phone || '';
              const bestJob = candidate.bestJobMatch || candidate.bestJob || {};
              const matchScore = bestJob.score || candidate.matchScore || 0;
              const jobCategory = bestJob.category || bestJob.jobTitle || 'general';
              const skills = candidate.skills || candidate.resumeId?.skills || [];
              const experience = candidate.experienceYears || candidate.resumeId?.experience?.years || 0;
              const resumeId = candidate.resumeId?._id || candidate.resumeId || candidate._id;
            %>
            
            <div class="col-lg-4 col-md-6 mb-4 candidate-result-card" 
                 data-score="<%= matchScore %>" 
                 data-category="<%= jobCategory.toLowerCase().replace(/\s+/g, '_') %>"
                 data-name="<%= candidateName.toLowerCase() %>">
              <div class="card border-0 shadow-sm h-100 candidate-card">
                <!-- Card Header with Name and Rank -->
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                  <h5 class="mb-0">
                    <i class="fas fa-user"></i>
                    <%= candidateName %>
                  </h5>
                  <span class="badge bg-light text-primary fs-6">
                    Rank #<%= index + 1 %>
                  </span>
                </div>
                
                <div class="card-body">
                  <!-- Match Score with Best Job -->
                  <div class="d-flex justify-content-between align-items-center mb-3">
                    <span class="text-muted">Best Match Score:</span>
                    <span class="badge bg-<%= matchScore >= 75 ? 'success' : matchScore >= 50 ? 'warning' : 'danger' %> fs-6 match-score-display">
                      <%= Math.round(matchScore) %>%
                    </span>
                  </div>

                  <!-- Best Job Category -->
                  <div class="mb-3">
                    <div class="d-flex justify-content-between align-items-center">
                      <span class="text-muted">Best Job Match:</span>
                      <span class="badge bg-info">
                        <%= bestJob.jobTitle || jobCategory %>
                      </span>
                    </div>
                  </div>

                  <!-- Contact Info -->
                  <div class="mb-3">
                    <% if (email) { %>
                      <div class="d-flex align-items-center mb-2">
                        <i class="fas fa-envelope text-muted me-2"></i>
                        <small class="text-truncate"><%= email %></small>
                      </div>
                    <% } %>
                    <% if (phone) { %>
                      <div class="d-flex align-items-center mb-2">
                        <i class="fas fa-phone text-muted me-2"></i>
                        <small><%= phone %></small>
                      </div>
                    <% } %>
                  </div>

                  <!-- Experience -->
                  <% if (experience > 0) { %>
                    <div class="mb-3">
                      <div class="d-flex justify-content-between">
                        <span class="text-muted">Experience:</span>
                        <span class="badge bg-secondary">
                          <%= experience %> years
                        </span>
                      </div>
                    </div>
                  <% } %>

                  <!-- Skills Preview -->
                  <% if (skills && skills.length > 0) { %>
                    <div class="mb-3">
                      <h6 class="text-secondary mb-2">Top Skills:</h6>
                      <div class="d-flex flex-wrap gap-1">
                        <% skills.slice(0, 3).forEach(skill => { %>
                          <span class="badge bg-secondary"><%= skill %></span>
                        <% }); %>
                        <% if (skills.length > 3) { %>
                          <span class="badge bg-light text-dark">+<%= skills.length - 3 %> more</span>
                        <% } %>
                      </div>
                    </div>
                  <% } %>

                  <!-- All Job Scores Preview -->
                  <% if (candidate.allJobScores && Object.keys(candidate.allJobScores).length > 1) { %>
                    <div class="mb-3">
                      <h6 class="text-info mb-2">
                        <i class="fas fa-chart-bar"></i> Multi-Job Scores:
                      </h6>
                      <div class="progress-container">
                        <% Object.entries(candidate.allJobScores).slice(0, 3).forEach(([jobTitle, score]) => { %>
                          <% const jobScore = score.matchScore || score.score || 0; %>
                          <div class="d-flex justify-content-between align-items-center mb-1">
                            <small class="text-muted text-truncate" style="max-width: 60%">
                              <%= jobTitle.replace(/[_]/g, ' ').replace(/\b\w/g, l => l.toUpperCase()) %>
                            </small>
                            <small class="fw-bold"><%= Math.round(jobScore) %>%</small>
                          </div>
                          <div class="progress mb-2" style="height: 4px;">
                            <div class="progress-bar bg-<%= jobScore >= 75 ? 'success' : jobScore >= 50 ? 'warning' : 'danger' %>" 
                                 style="width: <%= jobScore %>%;"></div>
                          </div>
                        <% }); %>
                        <% if (Object.keys(candidate.allJobScores).length > 3) { %>
                          <small class="text-muted">+<%= Object.keys(candidate.allJobScores).length - 3 %> more job matches</small>
                        <% } %>
                      </div>
                    </div>
                  <% } %>
                </div>

                <!-- Action Buttons -->
                <div class="card-footer bg-transparent">
                  <div class="d-flex gap-2">
                    <a href="/candidate/<%= resumeId %>" 
                       class="btn btn-primary flex-fill">
                      <i class="fas fa-eye"></i> VIEW DETAILS
                    </a>
                    <a href="/candidate/<%= resumeId %>/download" 
                       class="btn btn-outline-secondary" 
                       target="_blank">
                      <i class="fas fa-download"></i>
                    </a>
                  </div>
                </div>
              </div>
            </div>
          <% }); %>
        </div>
      </div>
    </div>
  <% } else { %>
    <!-- No Results -->
    <div class="row">
      <div class="col-12">
        <div class="text-center py-5">
          <div class="card border-0 shadow-sm">
            <div class="card-body py-5">
              <i class="fas fa-search fa-4x text-muted mb-4"></i>
              <h3 class="text-muted mb-3">No candidates were processed in this multi-JD screening session</h3>
              <p class="text-muted mb-4">
                Try adjusting your screening criteria or upload more resumes to get better results.
              </p>
              <div class="d-flex gap-3 justify-content-center flex-wrap">
                <a href="/screening" class="btn btn-primary">
                  <i class="fas fa-cog"></i> Start New Screening
                </a>
                <a href="/upload" class="btn btn-outline-secondary">
                  <i class="fas fa-upload"></i> Upload More Resumes
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  <% } %>
</div>

<!-- Bootstrap CSS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
<!-- Font Awesome -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">

<!-- Enhanced JavaScript for Multi-JD Filtering -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Get all filter elements
  const scoreSlider = document.getElementById('minMatchScore');
  const scoreDisplay = document.getElementById('scoreDisplay');
  const sortSelect = document.getElementById('sortResults');
  const categoryFilter = document.getElementById('categoryFilter');
  const candidateCards = document.querySelectorAll('.candidate-result-card');
  const visibleCountSpan = document.getElementById('visibleCount');

  // Score filter functionality
  if (scoreSlider) {
    scoreSlider.addEventListener('input', function() {
      const minScore = parseInt(this.value);
      scoreDisplay.textContent = minScore;
      filterCandidates();
    });
  }

  // Category filter functionality
  if (categoryFilter) {
    categoryFilter.addEventListener('change', filterCandidates);
  }

  // Sort functionality
  if (sortSelect) {
    sortSelect.addEventListener('change', function() {
      sortCandidates(this.value);
    });
  }

  function filterCandidates() {
    const minScore = scoreSlider ? parseInt(scoreSlider.value) : 0;
    const selectedCategory = categoryFilter ? categoryFilter.value : '';
    
    let visibleCount = 0;
    
    candidateCards.forEach(card => {
      const cardScore = parseInt(card.dataset.score || 0);
      const cardCategory = card.dataset.category || '';
      
      const scoreMatch = cardScore >= minScore;
      const categoryMatch = !selectedCategory || cardCategory.includes(selectedCategory.toLowerCase());
      
      if (scoreMatch && categoryMatch) {
        card.style.display = '';
        card.classList.add('fade-in');
        visibleCount++;
      } else {
        card.style.display = 'none';
        card.classList.remove('fade-in');
      }
    });
    
    if (visibleCountSpan) {
      visibleCountSpan.textContent = visibleCount;
    }
  }

  function sortCandidates(sortType) {
    const container = document.getElementById('candidatesContainer');
    const cards = Array.from(container.children);
    
    cards.sort((a, b) => {
      switch (sortType) {
        case 'score-desc':
          return parseInt(b.dataset.score || 0) - parseInt(a.dataset.score || 0);
        case 'score-asc':
          return parseInt(a.dataset.score || 0) - parseInt(b.dataset.score || 0);
        case 'name-asc':
          return a.dataset.name.localeCompare(b.dataset.name);
        case 'name-desc':
          return b.dataset.name.localeCompare(a.dataset.name);
        case 'category':
          const catA = a.dataset.category || 'zzz';
          const catB = b.dataset.category || 'zzz';
          if (catA !== catB) return catA.localeCompare(catB);
          return parseInt(b.dataset.score || 0) - parseInt(a.dataset.score || 0);
        default:
          return 0;
      }
    });
    
    // Re-append sorted cards with animation
    cards.forEach((card, index) => {
      card.style.animationDelay = `${index * 0.05}s`;
      container.appendChild(card);
    });
  }

  // Initialize filters
  filterCandidates();
});
</script>

<!-- Enhanced Styles -->
<style>
.candidate-card {
  transition: all 0.3s ease;
}

.candidate-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 25px rgba(0,0,0,0.15) !important;
}

.match-score-display {
  font-size: 1rem;
  font-weight: 600;
}

.card-header {
  border-bottom: 2px solid rgba(255,255,255,0.1);
}

#scoreDisplay {
  font-weight: 600;
  color: #0d6efd;
}

.bg-gradient {
  position: relative;
  overflow: hidden;
}

.bg-gradient::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(255,255,255,0.1);
  border-radius: inherit;
}

.progress-container .progress {
  background-color: rgba(0,0,0,0.1);
}

.fade-in {
  animation: fadeIn 0.3s ease-in;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

/* Category-specific colors */
.candidate-result-card[data-category*="network"] .card-header {
  background: linear-gradient(135deg, #17a2b8 0%, #138496 100%) !important;
}

.candidate-result-card[data-category*="developer"] .card-header {
  background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%) !important;
}

.candidate-result-card[data-category*="software"] .card-header {
  background: linear-gradient(135deg, #007bff 0%, #0056b3 100%) !important;
}

.candidate-result-card[data-category*="finance"] .card-header {
  background: linear-gradient(135deg, #fd7e14 0%, #e55a00 100%) !important;
}
</style>